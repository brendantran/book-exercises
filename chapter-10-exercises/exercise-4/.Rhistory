install.packages("dplyr")
library("dplyr")
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, delayed_in_air = arr_delay - dep_delay)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate("flights"", delayed_in_air = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
# Make a histogram of the amount of time gained using the `hist()` function
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
# On average, did flights to SeaTac gain or loose time?
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate("flights"", delayed_in_air = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
# Make a histogram of the amount of time gained using the `hist()` function
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
# On average, did flights to SeaTac gain or loose time?
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, delayed_in_air = arr_delay - dep_delay)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate("flights"", delayed_in_air = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
# Make a histogram of the amount of time gained using the `hist()` function
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
# On average, did flights to SeaTac gain or loose time?
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate("flights", delayed_in_air = arr_delay - dep_delay)
view(flights)
View(flights)
library("nycflights13")
nrow(flights)
ncol(flights)
colnames(flights)
View(flights)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, delayed_in_air = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
arrange(flights, -delayed_in_air)
View(flights)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarise(flights, avg = mean(delayed_in_air))
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarise(flights, avg = mean(delayed_in_air, na.rm = TRUE))
View(to_sea)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
to_sea <- filter(flights, dest == "SEA")
View(to_sea)
to_sea <- select(to_sea, origin, dest, gain_in_air)
to_sea <- select(to_sea, origin, dest, delay)
to_sea <- select(to_sea, origin, dest, delayed_in_air)
View(to_sea)
# Make a histogram of the amount of time gained using the `hist()` function
hist(select(flights, delayed_in_air))
# Make a histogram of the amount of time gained using the `hist()` function
??hist
# Make a histogram of the amount of time gained using the `hist()` function
?hist
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights)
# On average, did flights to SeaTac gain or loose time?
summarise(to_sea, avg_delayed = mean(delayed_in_air, na.rm = TRUE))
pipe()
??pipe()
?pipe()
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights)
# Make a histogram of the amount of time gained using the `hist()` function
hist(2)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
filter(flights, origin == "JFK") %>% filter(dest == "SEA")
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
filter(flights, origin == "JFK") %>% filter(dest == "SEA") %>% summarise(mean())
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
filter(flights, origin == "JFK") %>% filter(dest == "SEA") %>% summarise(mean(arr_time))
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
filter(flights, origin == "JFK") %>% filter(dest == "SEA") %>% summarise(mean(arr_time, na.rm = TRUE))
%>% summarise(max(arr_time, na.rm = TRUE))
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
filter(flights, origin == "JFK") %>% filter(dest == "SEA") %>% summarise(mean(arr_time, na.rm = TRUE)) %>% summarise(max(arr_time, na.rm = TRUE))
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
filter(flights, origin == "JFK") %>% filter(dest == "SEA") %>% summarise(mean(arr_time, na.rm = TRUE)), summarise(max(arr_time, na.rm = TRUE))
# Make a histogram of the amount of time gained using the `hist()` function
hist(select(flights, delayed_in_air))
# Make a histogram of the amount of time gained using the `hist()` function
hist(delayed_in_air)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights)
# Make a histogram of the amount of time gained using the `hist()` function
hist(delayedAssign())
# Make a histogram of the amount of time gained using the `hist()` function
hist(delayed_in_air)
# Make a histogram of the amount of time gained using the `hist()` function
hist(select(flights, delayed_in_air))
# Make a histogram of the amount of time gained using the `hist()` function
hist(1, 2)
# Make a histogram of the amount of time gained using the `hist()` function
hist(1, 2, 3)
