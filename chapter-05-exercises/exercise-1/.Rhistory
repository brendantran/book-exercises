hometown <- Puyallup
hometown <- 'Puyallup'
hometown <- "Puyallup"
# Assign your height (in inches) to a variable `my_height`
my_height <- "5'10"
# Assign your name to the variable `my_name`
my_name <- "Brendan Tran"
# Assign your height (in inches) to a variable `my_height`
my_height <- "5'10""
# Create a variable `puppies` equal to the number of puppies you'd like to have
# Create a variable `puppy_price`, which is how much you think a puppy costs
# Create a variable `total_cost` that has the total cost of all of your puppies
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
# Assign your height (in inches) to a variable `my_height`
my_height <- "5'10\""
# Assign your height (in inches) to a variable `my_height`
my_height <- "5'10/""
# Create a variable `puppies` equal to the number of puppies you'd like to have
# Create a variable `puppy_price`, which is how much you think a puppy costs
# Create a variable `total_cost` that has the total cost of all of your puppies
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
# Assign your height (in inches) to a variable `my_height`
my_height <- "5 feet 10 inches""
# Create a variable `puppies` equal to the number of puppies you'd like to have
# Create a variable `puppy_price`, which is how much you think a puppy costs
# Create a variable `total_cost` that has the total cost of all of your puppies
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
# Assign your height (in inches) to a variable `my_height`
my_height <- "5 feet 10 inches"
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensiev <- false;
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive < total_cost
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
total_cost > 1000
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- $800
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 800
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- 800
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 / total_cost
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- (int)1000 / total_cost
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- (1000 / total_cost)L
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 / total_cost
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 1000
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 1001
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppy_price * puppies
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 700
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
too_expensive = FALSE
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 2
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
if total_cost > 1000:
too_expensive = TRUE
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
if total_cost > 1000:
too_expensive = TRUE
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
if total_cost > 1000:
too_expensive = TRUE
too_expensive = FALSE
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 / total_cost
too_expensive = FALSE
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
if total_cost > 1000:
too_expensive = TRUE
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
if total_cost > 1000:
too_expensive = TRUE
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 700
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppy_price * puppies
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 2
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 700
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppy_price * puppies
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 1001
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppy_price * puppies
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 / total_cost
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 999
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppy_price * puppies
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 800
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppy_price * puppies
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 / total_cost
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 %/% total_cost
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 1000
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppy_price * puppies
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Puyallup"
# Assign your name to the variable `my_name`
my_name <- "Brendan Tran"
# Assign your height (in inches) to a variable `my_height`
my_height <- "5 feet 10 inches"
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 1000
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppy_price * puppies
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 %/% total_cost
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 %/% total_cost
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 5000 %/% total_cost
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 800
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppy_price * puppies
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 %/% total_cost
# Create a variable `my_name` that contains your name
my_name <- "Brendan Tran"
# Create a variable `my_name` that contains your name
my_name <- "Brendan Tran"
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
name_length <- nchar(my_name)
# Create a variable `my_name` that contains your name
my_name <- "Brendan"
# Print the number of letters in your name
print(name_length)
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- paste(my_name, "is programming!")
# Make the `now_doing` variable upper case
now_doing = toupper(now_doing)
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1, 13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric, 15, nchar(intro))
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric, 15)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric, 15)
fruits <- substr(lyric, 15, length)
fruits <- substr(lyric, 15, length)
fruits <- substr(lyric, 15, length)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric, 15, nchar(lyric))
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a", "ee")
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub(fruit,"a", "ee")
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub(fruits,"a", "ee")
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub(fruits")
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a", "ee", fruits)
fruits_o <- gsub("a", "o", fruits)
print(lyric_e)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro, fruits_e)
print(lyric_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o))
print(lyric_e)
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(x) {
return(x + 3)
}
return(x + 3)
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(x) {
return(x + 3)
}
return(x + 3)
output <- x + 3;
output <- x + 3;
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(x) {
output <- x + 3;
return(output)
}
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(input) {
output <- x + 3;
return(output)
}
output <- input + 3;
input + 3
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(input) {
input + 3
}
input + 3
add_three(5)
ten <- add_three(7)
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 10)
feet / 12 + inches / 12
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches) {
feet / 12 + inches / 12
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 10)
(feet + inches / 12) / 3.281
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches) {
(feet + inches / 12) / 3.281
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 10)
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 11)
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 10)
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c(Brendan, Alex, Anson)
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c("Brendan", "Alex", "Anson")
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- c(10:49)
# Use the `length()` function to get the number of elements in `n`
length(n)
# Add 1 to each element in `n` and print the result
n <- n + 1;
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- seq(10, 1)
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- c(10, 1)
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- c(10:1)
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- seq(10, 1)
# Subtract `m` FROM `n`. Note the recycling!
m - n
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range = seq(-5, 10, .1)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave = sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave = cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave = (sin_wave * cos_wave) + sin_wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- c(10:20)
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- seq(21, 30)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- c(first_ten, next_ten)
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[11]
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers[2, 5]
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers[2:5]
# Create a vector `even` that holds the even numbers from 1 to 100
even <- seq(1, 100, 2)
# Create a vector `even` that holds the even numbers from 1 to 100
even <- seq(0, 100, 2)
# Create a vector `even` that holds the even numbers from 1 to 100
even <- seq(0, 200, 2)
print(even)
# Create a vector `even` that holds the even numbers from 1 to 100
even <- seq(0, 100, 2)
print(even)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even) %% 2 = 0
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even) %% 2 = 0
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even) % 2 = 0
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all()
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all() %% 2
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all() %% even
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even %% 2 == 0)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even %% 2 == 0)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even %% 2 == 1)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even %% 2 == 0)
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers = c[8, 6, 7, 5, 3, 0, 9]
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers = c(8, 6, 7, 5, 3, 0, 9)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix = phone_numbers(1:3)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix = phone_numbers[1:3}
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix = phone_numbers[1:3]
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- phone_numbers[phone_numbers < 5]
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- phone_numbers[phone_numbers <= 5]
# Create a vector `large` that has the values of `phone_numbers` that are
# strictly greater than 5
large <- phone_numbers[phone_numbers >= 5]
# Create a vector `large` that has the values of `phone_numbers` that are
# strictly greater than 5
large <- phone_numbers[phone_numbers > 5]
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers[phone_numbers > 5] <- 5
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[phone_numbers % 2 = 1] <- 0
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[phone_numbers % 2] <- 0
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[phone_numbers % 2 == 1] <- 0
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[phone_numbers %% 2 == 1] <- 0
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[phone_numbers %% 2 = 1] <- 0
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[phone_numbers %% 2 == 1] <- 0
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers = c(8, 6, 7, 5, 3, 0, 9)
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[phone_numbers %% 2 == 1] <- 0
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers = c(8, 6, 7, 5, 3, 0, 9)
